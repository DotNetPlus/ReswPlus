//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "MainPage.xaml.h"

void ::TestCppCXUWP::MainPage::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///MainPage.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class TestCppCXUWP::MainPage::MainPage_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::TestCppCXUWP::MainPage, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    MainPage_obj1_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~MainPage_obj1_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 3: // MainPage.xaml line 20
                this->obj3 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 5: // MainPage.xaml line 32
                this->obj5 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
        }
    }

    void Disable(int lineNumber, int columnNumber)
    {
        if (lineNumber == 20 && columnNumber == 38)
        {
            isobj3TextDisabled = true;
        }
        else if (lineNumber == 32 && columnNumber == 38)
        {
            isobj5TextDisabled = true;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        return;
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        *nextPhase = -1;
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBlock^ obj3;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj5;

    // Static fields for each binding's enabled/disabled state
    static bool isobj3TextDisabled;
    static bool isobj5TextDisabled;
    
    // Fields for binding tracking.
    ::Windows::UI::Xaml::DependencyObject^ cacheDPC_MailSlider_Value = nullptr;
    ::Windows::UI::Xaml::DependencyObject^ cacheDPC_DistanceSlider_Value = nullptr;
    __int64 tokenDPC_MailSlider_Value = 0;
    __int64 tokenDPC_DistanceSlider_Value = 0;

    // Update methods for each path node used in binding steps.
    void Update_(::TestCppCXUWP::MainPage^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_MailSlider(obj->MailSlider, phase);
                this->Update_DistanceSlider(obj->DistanceSlider, phase);
            }
        }
    }
    void Update_MailSlider(::Windows::UI::Xaml::Controls::Slider^ obj, int phase)
    {
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(obj, ::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty, &this->cacheDPC_MailSlider_Value, &this->tokenDPC_MailSlider_Value);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_MailSlider_Value(obj->Value, phase);
            }
        }
    }
    void Update_MailSlider_Value(::default::float64 obj, int phase)
    {
        if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MainPage.xaml line 20
            if (!isobj3TextDisabled)
            {
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj3, safe_cast<::Platform::String^>(this->LookupConverter("PluralConverter")->Convert(obj, ::Platform::String::typeid, "YouGotMail", nullptr)), nullptr);
            }
        }
    }
    void Update_DistanceSlider(::Windows::UI::Xaml::Controls::Slider^ obj, int phase)
    {
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(obj, ::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty, &this->cacheDPC_DistanceSlider_Value, &this->tokenDPC_DistanceSlider_Value);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_DistanceSlider_Value(obj->Value, phase);
            }
        }
    }
    void Update_DistanceSlider_Value(::default::float64 obj, int phase)
    {
        if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MainPage.xaml line 32
            if (!isobj5TextDisabled)
            {
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj5, safe_cast<::Platform::String^>(this->LookupConverter("PluralConverter")->Convert(obj, ::Platform::String::typeid, "RunDistance", nullptr)), nullptr);
            }
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(nullptr, ::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty, &this->cacheDPC_MailSlider_Value, &this->tokenDPC_MailSlider_Value);
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(nullptr, ::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty, &this->cacheDPC_DistanceSlider_Value, &this->tokenDPC_DistanceSlider_Value);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
            if (sender->Equals(this->cacheDPC_MailSlider_Value) && ::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty->Equals(prop))
            {
                ::Windows::UI::Xaml::Controls::Slider^ obj = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(sender);
                if (obj != nullptr)
                {
                    this->Update_MailSlider_Value(obj->Value, DATA_CHANGED);
                }
            }
            if (sender->Equals(this->cacheDPC_DistanceSlider_Value) && ::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty->Equals(prop))
            {
                ::Windows::UI::Xaml::Controls::Slider^ obj = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(sender);
                if (obj != nullptr)
                {
                    this->Update_DistanceSlider_Value(obj->Value, DATA_CHANGED);
                }
            }
        }
    }

    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
};

    // Initializing static fields for each binding's enabled/disabled state
bool TestCppCXUWP::MainPage::MainPage_obj1_Bindings::isobj3TextDisabled = false;
bool TestCppCXUWP::MainPage::MainPage_obj1_Bindings::isobj5TextDisabled = false;

void ::TestCppCXUWP::MainPage::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 2:
        {
            this->MailSlider = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(__target);
        }
        break;
    case 4:
        {
            this->DistanceSlider = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(__target);
        }
        break;
    case 6:
        {
            this->CodeBehindSlider = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Slider^>(this->CodeBehindSlider))->ValueChanged += ref new ::Windows::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventHandler(this, (void (::TestCppCXUWP::MainPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventArgs^))&MainPage::Slider_ValueChanged);
        }
        break;
    case 7:
        {
            this->DistanceCodeBehindTextBlock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::TestCppCXUWP::MainPage::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1: // MainPage.xaml line 1
            {
                ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
                MainPage_obj1_Bindings* objBindings = new MainPage_obj1_Bindings();
                objBindings->SetDataRoot(this);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element1, bindings);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


